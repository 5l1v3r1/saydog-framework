import threading
from queue import Queue
import time
import socket

u='\033[4m'
w='\x1b[00m'
r='\x1b[91m'
b='\x1b[36;1m'
y='\x1b[33m'
# a print_lock is what is used to prevent "double" modification of shared variables.
# this is used so while one thread is using a variable, others cannot access
# it. Once done, the thread releases the print_lock.
# to use it, you want to specify a print_lock per thing you wish to print_lock.
print_lock = threading.Lock()



file = open('target.txt', 'r')
target = file.read()
ip = socket.gethostbyname(file.read())




def portscan(port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        con = s.connect((target,port))
        with print_lock:
            print('')
            print(w+'OPEN PORT IS FOUNDED')
            print(w+'--------------------')
            print(w+'host  : '+target)
            print(w+'ip    : '+ip)
            print(w+'port  : '+port)
            print(w+'--------------------')
            print('')
        con.close()
    except:
        f =  (r+'[-] '+w+target.strip()+' open port not found')
        print(f)


# The threader thread pulls an worker from the queue and processes it
def threader():
    while True:
        # gets an worker from the queue
        worker = q.get()

        # Run the example job with the avail worker in queue (thread)
        portscan(worker)

        # completed with the job
        q.task_done()



        

# Create the queue and threader 
q = Queue()

# how many threads are we going to allow for
for x in range(1000):
     t = threading.Thread(target=threader)

     # classifying as a daemon, so they will die when the main dies
     t.daemon = True

     # begins, must come after daemon definition
     t.start()


start = time.time()

# 100 jobs assigned.
for worker in range(1,1000):
    q.put(worker)

# wait until the thread terminates.
q.join()

	  